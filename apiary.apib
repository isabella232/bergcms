FORMAT: 1A
HOST: http://bergcms.local/

# Berg CMS

The Berg CMS uses a simple API allowing consumers to view the stored articles and change them.

## Articles of the Actual Issue [/articles]

### List All Articles [GET /articles]

Returns all the articles of the actual issue.

+ Response 200 (application/json; charset=utf-8)

        {
            "articles": [
                {
                    "id": 25,
                    "priority": 100,
                    "type": "A|F|K|A1|F1|A2|F2|A3|F3",
                    "chapter": "1:Introduction",
                    "title": "Title of the article",
                    "header": "Heading part of the article.",
                    "body": "The main part of the article.",
                    "footer": "Buttom part of the article.",
                    "lastChanged": "yyyymmdd-hhmmss-dd;ip:port;user"
                }
            ]
        }


### Get Article [GET /articles/{id}]

Returns a specific article that can be displayed and edited.

+ Parameters
    + id: 25 (number) - the number of the desired article.

+ Response 200 (application/json; charset=utf-8)

        {
            "id": 25,
            "priority": 100,
            "type": "F",
            "chapter": "1:Introduction",
            "title": "Title of the article",
            "header": "Heading part of the article.",
            "body": "The main part of the article.",
            "footer": "Buttom part of the article.",
            "lastChanged": "20160715-102748-Fr \/ 127.0.0.1:40142 \/ -"
        }
        
### Create New Article or Copy Article [POST /articles]

Creates an empty article when empty request is used. 
Main purpose is to reserve the unique ID for this article.

Creates a new article from an existing one when the Request provides 
the id of the article that should be copied.


+ Request (application/json)

    
+ Response 201 (application/json; charset=utf-8)

        {
            "id": 26,
            "priority": 100,
            "type": "A",
            "chapter": "",
            "title": "",
            "header": "",
            "body": "",
            "footer": "",
            "lastChanged": ""
        }
        
        


+ Request (application/json)

        { 
            "chapter": "Introduction",
            "title": "Title of the article"
        }
    
+ Response 201 (application/json; charset=utf-8)

        {
            "id": 27,
            "priority": 100,
            "type": "A",
            "chapter": "Introduction",
            "title": "Title of the article",
            "header": "",
            "body": "",
            "footer": "",
            "lastChanged": ""
        }

### Change Article [PUT /articles/{id}]

Changes a previously created or retrieved article.

The request has to provide two article structures. 
The one that was retrieved from the server and the changed article.
The server will just store the changed information if the article was not changed in the meantime.
The comparison is performed attribute by attribute.
The id must not be changed.
The lastChanged attribute overwrites the existing one, when the information is stored into the database.

Attribute defintion:
- oldArticle: Article retrieved from the server.
- newArticle: This is the changed version of the article that should be stored on the server.
- actualArticle: This is article stored in the database after performing the PUT operation.
- changedArticle: This is the version of the article at the beginning of the PUT operation.

The first response is returned when oldArticle matches the changedArticle.

The seconde response is returned when oldArticle and changedArticle are different.

+ Parameters
    + id: 25 (number) - the number of the edited article.

+ Request (application/json)

        {
            "oldArticle": {
                "id": 25,
                "priority": 100,
                "type": "F",
                "chapter": "1:Introduction",
                "title": "Title of the article",
                "header": "Heading part of the article.",
                "body": "The main part of the article.",
                "footer": "Buttom part of the article.",
                "lastChanged": "20160715-102748-Fr \/ 127.0.0.1:40142 \/ -"
            },
            "newArticle": {
                "id": 25,
                "priority": 100,
                "type": "A",
                "chapter": "Introduction",
                "title": "Changed Title",
                "header": "",
                "body": "Some text within the article.",
                "footer": ""
            }
        }


+ Response 200

        {
            "actualArticle": {
                "id": 25,
                "priority": 100,
                "type": "A",
                "chapter": "Introduction",
                "title": "Changed Title",
                "header": "",
                "body": "Some text within the article.",
                "footer": "",
                "lastChanged": "20160715-102748-Fr \/ 127.0.0.1:40142 \/ -"
            }
        }

+ Response 200

        {
            "actualArticle": {
                "id": 25,
                "priority": 200,
                "type": "A",
                "chapter": "1:Introduction",
                "title": "Changed Title",
                "header": "",
                "body": "Some text within the article.",
                "footer": "",
                "lastChanged": "20160715-102748-Fr \/ 127.0.0.1:40142 \/ -"
            },
            "oldArticle": {
                "id": 25,
                "priority": 100,
                "type": "F",
                "chapter": "1:Introduction",
                "title": "Title of the article",
                "header": "Heading part of the article.",
                "body": "The main part of the article.",
                "footer": "Buttom part of the article.",
                "lastChanged": "20160715-082748-Fr \/ 127.0.0.1:40142 \/ -"
            },
            "newArticle": {
                "id": 25,
                "priority": 100,
                "type": "A",
                "chapter": "1:Introduction",
                "title": "Changed Title",
                "header": "",
                "body": "Some text within the article.",
                "footer": "",
                "lastChanged": "20160715-102748-Fr \/ 127.0.0.1:40142 \/ -"
            },
            "changedArticle": {
                "id": 25,
                "priority": 200,
                "type": "F",
                "chapter": "1:Introduction",
                "title": "Title of the article",
                "header": "Heading part of the article.",
                "body": "The main part of the article.",
                "footer": "Buttom part of the article.",
                "lastChanged": "20160715-092748-Fr \/ 127.0.0.1:32849 \/ -"
            }
        }


        
### Delete Article [DELETE /articles/{id}]

Deletes the given article from the database. It is stored in the backup database for error recovery.

+ Parameters
    + id: 25 (number) - the number of the desired article.

+ Response 200



## Publishing the actual issue [/print]

The actual issue is extracted from the database (.csv) and transpiled to LaTeX. 
Then PdfLaTeX is used to typeset the final document and returned as PDF.

### Process and return the actual issue [GET /print/{type}]

+ Parameters
    + type: final (string) - the type is one of final, draft, final w/o images and ebook.

+ Response 200 (application/pdf)