FORMAT: 1A
HOST: http://bergcms.local/

# Berg CMS

The Berg CMS uses a simple API allowing consumers to view the stored articles and change them.

## Articles of the Actual Issue [/articles]

### List All Articles [GET /articles]

Returns all the articles of the actual issue.

+ Response 200 (application/json; charset=utf-8)

        {
            "articles": [
                {
                    "id": 25,
                    "priority": 100,
                    "type": "A|F|K|A1|F1|A2|F2|A3|F3",
                    "chapter": "Introduction",
                    "title": "Title of the article",
                    "header": "Heading part of the article",
                    "body": "The main part of the article",
                    "footer": "Buttom part of the article",
                    "lastChanged": "yyyymmdd-hhmmss-dd;ip:port;user"
                }
            ]
        }


### Get Article [GET /articles/:id]

Returns a specific article that can be displayed and edited.

+ Response 200 (application/json)

        {
            "id": 25,
            "title": "Title of the article",
            "chapter": "Introduction"
        }
        
### Create New Article or Copy Article [POST /articles]

Creates an empty article when empty request is used. 
Main purpose is to reserve the unique ID for this article.

Creates a new article from an existing one when the Request provides 
the id of the article that should be copied.


+ Request (application/json)

    
+ Response 201 (application/json)

        {
            "id": 26,
            "priority": 100,
            "type": "A"
        }
        
        


+ Request (application/json)

        { 
            "title": "Title of the article",
            "chapter": "Introduction"
        }
    
+ Response 201 (application/json)

        {
            "id": 26,
            "title": "Title of the article",
            "chapter": "Introduction"
        }
        
        
### Delete Article [DELETE /articles/:id]

Deletes the given article from the database. It is stored in the backup database for error recovery.

+ Response 200



## Publishing the actual issue [/print]

The actual issue is extracted from the database (.csv) and transpiled to LaTeX. 
Then PdfLaTeX is used to typeset the final document and returned as PDF.

### Process and return the actual issue [GET /print/:type]

type is one of final, draft, final w/o images and ebook.

+ Response 200 (application/pdf)